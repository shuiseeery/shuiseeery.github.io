<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 有所思</title>
    <link>https://shuiseeery.github.io/post/</link>
    <description>Recent content in Posts on 有所思</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 31 Jan 2021 08:36:54 -0700</lastBuildDate><atom:link href="https://shuiseeery.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.  初入江湖——数据分析师做什么</title>
      <link>https://shuiseeery.github.io/post/1-firstday/</link>
      <pubDate>Sun, 31 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/1-firstday/</guid>
      <description> 铛铛铛铛，周一早上9点，小不懂同学去某东公司报道啦~
报道后领了电脑工卡和入职指南，HR领着她，穿过一排一排工位区，去找带她的师傅。
窗户边一个圆脸戴眼镜、微胖的中年男子，见hr和小不懂来了，热情地起来打招呼“王娟，这是小不懂吧，办完入职了？”HR王娟说“嗯，刚办完。这不就赶紧来找你。”，她给小不懂介绍“这是你之后的师傅 于雷，你可以喊他大于哥，以后由他来带你，你听他安排工作。什么事不懂都可以问他。”
小不懂忙给他打招呼“大于哥好，我是小不懂。请多指教。”，小不懂刚刚听他声音，知道是之前的面试官。
于雷指着旁边的空桌子，笑着说”你先坐这里，按入职指南上的流程装一下电脑上的各类软件，一会儿中午带你去吃饭，下午再跟你介绍这边的情况“
小不懂认真地说”好，大于哥。“
她坐下放好东西，对照着入职指南，打开电脑，联网，安装起邮箱、企业微信等必备工具。
 中午十一点半，于雷喊她一起去食堂。某东有一栋楼都是食堂。
于雷带她去了炒菜窗口，点了2个小炒，2人一起坐下边吃边聊。谈了些是哪里人，有没有兄弟姐妹，住得离公司远不远之类的话，按下不表。
于雷告诉她，中午吃完饭到2点，大家一般会在园区走走，或者趴在桌子上午休一会儿。
小不懂不困，就趁这个时间先出去溜达。她转了一圈儿，某东有好多栋楼，这里面得有多少人啊，真像个巨无霸。
 下午，于雷找了个会议室，说先和小不懂介绍介绍情况。
小不懂心里很激动，飞快地拿了本子和笔跟过去，准备记笔记。
 于雷先问：“我们是数据分析师，你怎么理解这个职位呢？”
小不懂“嗯，顾名思义，数据分析师，是分析数据，从中挖取信息的人。在分析中，可能会用到Excel、PPT等工具。我是这么理解的”
于雷点点头，“嗯，不错。不过回答不全面。你说了数据分析师是什么人，使用什么工具，不过漏掉了最重要的一点，为什么要做分析？”
小不懂低头想了想，为什么要做分析，不做行不行。做分析肯定有更多的好处，不然公司肯定不会招我来。她试探性地问：”从分析中能产生一些好处？“
于雷笑着说“对。**从分析中能得到好处。但为什么能得到好处呢？能得到多大好处？**我提示一下，比如说一个健康的人去医院做检查，和一个生病的人去医院做检查，他们分别得到什么好处？“
小不懂：”生病的人去医院做检查，会查出病，医生给他看病开药，他服药后会恢复健康。这个好处很明显。健康的人嘛，知道他没病，家人也会放心一些？像做体检一样“
于雷：”是这样。再比如说，查出来病情，但这个医生治不了，这有好处吗？“
小不懂：”有好有坏。如果换个医生、换个医院，能治好，皆大欢喜。如果治不好，病人、家属都会很难过。“
 于雷：”那治不好的情况，做检查完全没好处吗？“
小不懂：”也还是有好处的。病人能知道自己时日不久，会更好地利用最后的时间，少留遗憾。“
于雷：”不错，答得很好。你总结一下，去医院做检查的好处。“
小不懂：”对身体健康的人，可以了解自己的身体状况。对有病情的人，能查出问题，开始治疗，或者寻求其他解决办法。“
于雷：”嗯。了解身体状况，有病治病、没病预防。核心来看，医生发挥价值在检查、治病这两点上。能解决患者存在的问题，这是医生的价值。那么类似的，你再想想，为什么我们要做分析？”
小不懂这下明白了，她讲：“解决公司里的一些问题。”
于雷哈哈笑了，“你又答了一半。首先我们要判断有没有问题，其次是解决问题。判断有没有问题这点，要放在心上，判断力很重要”
小不懂点点头，不好意思地笑了。
 小不懂好奇地又问：”怎么判断有没有问题呢？是用数据吗？“
于雷：”这个问题很好。是不是用数据我一会儿再告诉你。你先说说，什么叫有问题。”
小不懂：“有问题，有问题的对立面是正常。不正常就是有问题。”
于雷：“这个描述很形象。听起来，正常的会聚成一堆，有问题的也会聚成一堆，这两堆之间有比较大的距离。是不是这样？”
小不懂小鸡啄米般点头好几下，“对，是这样。像我学过的聚类一样。同类聚在一起，不同的类之间距离较远。”
 于雷：“是的。找到合适的角度切入，问题就会暴露出来。我们再来谈谈为什么要用数据。假设你经营着一个小杂货店，卖零食饮料、烟酒给周围的居民。你会怎么看赚到了多少钱呢？“
小不懂：”拿收入减去成本，很容易就知道了。“
于雷：”嗯，类似地，什么商品卖的好，什么商品卖的不好，你心里基本都有数。卖得差的商品少进货，好卖的多进货，你的生意越来越好，在市里开了20家分店。现在，你怎么看赚到多少钱呢？“
小不懂：”先每家店的收入-成本，再把每家店赚的钱加起来。“
于雷：”对。随着规模扩大，你对每家店也不那么了解了。哪些商品好卖，哪些商品不好卖需要靠店长给你汇报。店长汇报完，还需要整理结果，你才能判断后续怎么进货。这时候，你开始通过帐目管理30家店。“
 小不懂：”嗯，我有了30家店，应该挺有钱了，可以找个会计来帮我算账？“
于雷：”哈哈哈，对。那等你有100家、1000家、10000家呢？“
小不懂：”啊，我可以招好多个会计。“
于雷：”嗯。很多传统零售企业是这么运转的。现在，随着科技进步，产生了规模超过1万家超市的网上超市，对数亿顾客，都提供个性化的商品推荐，产生了海量用户消费数据。你招的会计不知道拿这些数据怎么办，不知道怎么从这些数据中来获得更有价值的信息。该怎么办呢？“
小不懂：”啊，所以需要数据分析师？“
于雷：”恭喜你，答对了。海量数据存储在数据库里，我们要从中找到问题，思考解决方案。不过呢，数据不是发现问题的唯一方式，之后你会慢慢学习其他方法的。“
小不懂：”好，谢谢大于哥。“
 于雷：”对了，你不会SQL是吧？“
小不懂：”以前没接触过，我可以学的。“
于雷：”SQL是我们从数据库里取出数据的工具，学起来也不难。我明天开始教你。你先熟悉熟悉网上超市相关的知识，今天早点下班。“
小不懂：”好的~“
 小不懂觉得于雷好厉害，能把这些事讲的好清楚。
她回去整理整理于雷说的要点，找了些网上超市的资料，晚上吃完饭就先下班了。
成为社会人的第一天结束了，遇到了很厉害的师傅，好开心~~~
 </description>
    </item>
    
    <item>
      <title>2.  数据背后的故事——数据表</title>
      <link>https://shuiseeery.github.io/post/2-table/</link>
      <pubDate>Sat, 30 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/2-table/</guid>
      <description>第二天，小不懂刚刚到公司，于雷发给她一张表格，让她先自己看看，表格有什么特点，从中能得到什么信息。
表格如下：
   user_name user_id gender age address is_married have_baby     李雷 A1 男 23 北京西城区 未婚 无   韩梅梅 A2 女 22 北京东城区 未婚 无   王大锤 B3 男 27 上海黄浦区 已婚 无   张爱国 B4 男 35 合肥蜀山区 已婚 有   刘进步 C5 男 40 深圳福田区 未婚 无   王大锤 D6 女 28 南京玄武区 已婚      小不懂收到后，开始观察：</description>
    </item>
    
    <item>
      <title>3.  存放数据的地方——数据库</title>
      <link>https://shuiseeery.github.io/post/3-0-database/</link>
      <pubDate>Fri, 29 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/3-0-database/</guid>
      <description>第二天，小不懂给于雷讲了自己在数据表中的发现，于雷点点头，说今天讲新东西。
 于雷：昨天了解了数据表是什么，今天来介绍下数据库相关的知识。数据库是保存数据表的容器。我们用圆柱体标记数据库，圆柱体能装大量数据表。像下面这张图。
小不懂：哈哈，你画的数据库确实胖乎乎的，能装很多东西。database是英文名吧。
  于雷：对。数据库时时刻刻围绕在我们身边。每次网购，推荐算法根据我们的历史浏览记录，推荐可能喜欢的商品给我们，这个过程中，历史浏览记录储存在数据库中，算法挑选出的推荐商品，也存储在数据库里；
类似地，每次使用健康宝扫码时，位置信息也被存储在数据库中。有病例确诊时，通过调取该患者的轨迹信息，防疫部门把在一定时间内，去过相同位置的人作为密切接触者，对他们进行隔离观察，能够有效阻止疫情传播； 这样的例子还有很多，像信用卡账单信息、搜索记录、社交媒体上的好友信息等等。你能想到一些例子吗？
小不懂：唔，我们学校的选课信息、国家人口普查信息、招聘网站职位与简历、医院药品库存、患者电子病例。仔细想想，周围隐形数据库真多。
于雷：嗯。你刚刚提到的例子，有个很重要的特点，数据库都存储着特定的信息。数据本质是信息。社会上存储大量数据，是在有针对性地收集信息。为什么需要收集、存储信息呢？
  小不懂：因为有用？肯定是因为有用才收集的，不过为什么有用呢？
于雷：哈哈，确实因为有价值，才需要收集大量数据。大多情况下，人的行为都可以从利益关系入手来分析，无利不起早。信息反应事物的状态及其变化，比如快递运输信息，标记快递的运送状态；患者历史病症，标记患者的健康状态；历史购物记录，标记顾客的购买行为规律及偏好。 收集信息能更好地掌握现状。有句话叫“如果你不能衡量现状，就不能改进现状。”收集信息是为了掌控现状，降低不确定性，方便对现状加以分析优化。
小不懂：类似对症下药？
于雷：是的。了解患者的病情，才能知道患者有什么问题，进而做出判断，给患者用药，改善病情。数据是信息的载体。
小不懂：所以我们观察数据时，得明白数据背后的信息。
于雷：对。你回想下昨天说的，把数据扩展为完整故事，它们意思一样。
小不懂点点头。
  于雷继续：说回数据库。数据库是保存表的容器，像下面这张图示意的样子：
小不懂：有点像超大型excel，里面有多个sheet，每个sheet有一张表。
于雷：也可以这么理解。不过excel能存储的数据量有限，几十万行数据电脑便容易卡死。数据库能轻松处理上亿行数据。
小不懂：哇，巨无霸数据处理工具。
于雷：哈哈哈，数据库能存储、并处理大量数据，确实是巨无霸。等你多接触一段时间，会有更深感受。今天你安装一下Mysql 和Sublime text，Mysql是一个开源关系型数据库，我们今后要用Mysql来处理数据；Sublime text是一个跨平台的文本编辑器，使用它来编写数据库查询代码。
Mysql安装可以参考这个文档：https://cloud.tencent.com/developer/article/1636375
Sublime text 可以从官网下载安装程序，如果网络卡，可以找其他途径。
小不懂：好。
 小不懂回到工位，按文档说明装好了Mysql和Sublime text。
读者朋友，你安装好了吗？
  </description>
    </item>
    
    <item>
      <title>3-1.  导入数据表</title>
      <link>https://shuiseeery.github.io/post/3-1-upload-data/</link>
      <pubDate>Thu, 28 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/3-1-upload-data/</guid>
      <description>说明，以下代码导入过程为一次性流程，照着操作即可
强烈建议导入数据后跟着教程实践编写sql代码，不下水永远学不会游泳
（可以选择继续浏览几节后，再返回导入数据）
 首先，搜索电脑，打开CMD（命令提示符，输入命令操作电脑的一个工具）：
双击打开后，会看到如下界面：
此处看到的username应该是你电脑的用户名。
 接下来，通过命令行打开mysql：
mysql -uroot -pmypassword 你需要把 -p 后的mypassword换成安装Mysql时，你设置的密码，如果密码为Fly2sky，则输入：
mysql -uroot -pFly2sky 看到如下界面，即为成功。
如果提示无法识别mysql命令，是mysql环境变量没设置成功，返回检查。
  下一步，建数据库supermarket;
create database supermarket; 这时，数据库里是空的，什么都没有：
此处show tables 代码列出supermarket数据库里所有数据表，结果显示数据库里没有数据表。（这个命令会在之后详细学到）
接下来，我们按“CTRl+Z”退出Mysql，回到命令行提示符：
  下一步，我们需要把之后用到的数据表，导入数据库。
从下面的链接下载.sql文件，保存在&amp;quot;D:\database&amp;quot;目录下（需要在D盘新建目录，保存在其他位置也可以，需要替换下面代码中的路径）。
链接：https://pan.baidu.com/s/18lRfeA-UGQYZS3Iq5FGvaQ 提取码：xsw9  保存好后，回到CMD命令行提示符界面，输入以下代码：
mysql -uroot -pmypassword supermarket &amp;lt; D:\database\supermarket.sql 同样地，把 -p 后的mypassword换成安装Mysql时，你设置的密码，如果密码为Fly2sky，则输入：
mysql -uroot -pFly2sky supermarket &amp;lt; D:\database\supermarket.sql 输入后，mysql会显示一条Warning，提示我们从命令行输入密码可能会导致密码泄露，不安全。
  数据表较大，需要等待约20分钟方能执行完毕，可以先忙其他事情，一会儿回来看结果。
执行过程中，mysql告警信息下一行有个光标闪烁，表示仍在处理数据。
 执行完毕后，回到CMD正常界面，如下：
关掉命令提示符。
 打开mysql（MySQL 8.0 Command Line Client - Unicode），输入密码后，进入supermarket数据库，查看数据表：</description>
    </item>
    
    <item>
      <title>4.  找到需要的信息——select</title>
      <link>https://shuiseeery.github.io/post/4-select/</link>
      <pubDate>Wed, 27 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/4-select/</guid>
      <description>下午，于雷叫小不懂过去，给她讲SQL的基本操作。
于雷说：我们有很多卖家，现在运营同学需要选一批北京的优质卖家，来打造“母婴用品购物节”，想选择一批深受消费者喜欢的、生产婴儿用品的卖家，邀请供应商与平台一起做活动。我们一起来看看，怎么解决这个问题。
小不懂：好的~ 应该有个表，记录卖家的信息？如所在城市、品类、销量、知名度等数据？
于雷：是的。卖家信息表：seller_info，这张表。我们来看看，表里有哪些信息。
 于雷：首先
desc seller_info; 这样我们可以看到，数据表的结构是怎样的。你看到了什么信息？
小不懂：卖家id是主键，里面有省份、城市、邮编等信息。
于雷：对。seller_info 是数据表的名称，你可以把它换成其他任何数据表。另外，需要注意，结尾要加分号，告诉计算机，这段代码结束了。
 接下来我们来看表里具体的数据：
select * from seller_info; 小不懂：哇，屏幕上滚动了好多数据。这是把表里所有的数据都“秀”出来了吗？
一会儿，屏幕滚动完，显示一共有3095行数据。
小不懂：看着好炫酷。很有黑客帝国的感觉hhh
于雷：哈哈哈。你学会这个，可以在电脑小白面前吹牛。这个命令会把表里所有的数据都加载出来，看着很酷。
不过一般来说，不需要把所有的数据都展示出来，抽几十条就可以。为达到这个目的，需要用limit 来控制展示行数
select * from seller_info limit 10; 小不懂：嗯，我会了。如果我想显示20行，把10改成20就可以，对吧？
于雷：是的。除了select * 之外，还可以指定你想筛选的列，比如我们只想要卖家id 和城市：
select seller_id, city from seller_info limit 10; 小不懂：哦哦，类似于从excel数据表里，选中2列，复制到另一个工作簿里。
于雷：嗯，可以这么理解。你想想， select * from seller_info 可以等同于怎么写呢?
小不懂：select seller_id, seller_zip_code_prefix,city, province from seller_info; select * 是偷懒的方法。
于雷：对。可以少敲很多下键盘。你再观察一下city这列里具体的值，有什么发现？
小不懂：有一个“NULL”，是数据库里的空值吗？我们不知道这个卖家在哪个城市。
于雷：对，“NULL”是数据库里的空值，遇到时需要小心处理。
 于雷：下一步，我们要选择北京的供应商。
小不懂：是不是加一个城市=北京的条件，像excel里面的筛选一样？
于雷：对。
select * from seller_info where city=&amp;#39;北京&amp;#39; limit 10; 你观察以下，里面有哪些特别的地方呢？</description>
    </item>
    
    <item>
      <title>5.  用统计眼光看数据表——聚合函数</title>
      <link>https://shuiseeery.github.io/post/5-sumcount/</link>
      <pubDate>Tue, 26 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/5-sumcount/</guid>
      <description>第二天早上，小不懂来找于雷交练习作业：陕西99个、湖北145个。
计算代码是：
select * from seller_info where province=&amp;#39;陕西&amp;#39;; select * from seller_info where province=&amp;#39;湖北&amp;#39;; 从数据库最后的汇总行数中，读出卖家个数。
 于雷：不错。不过如果湖北有10万个卖家，数据库把所有信息滚动展示出来，会花费很长时间。还有一个更好的办法。
小不懂：是什么办法呢？能直接看到结果肯定更好。
于雷：SQL有个函数专门用来计算指定列的行数：
select count(seller_id) from seller_info where province=&amp;#39;陕西&amp;#39;; 小不懂：哇！这个好~~~
 于雷：你自己想一下，想知道我们总共有多少卖家，需要怎么计算？
小不懂：嗯，应该是从表里直接count卖家id：
select count(seller_id) from seller_info; 她说着，在电脑上敲下代码：结果立刻出来了：
于雷赞许地点点头：不错。
 现在我们可以取出北京地区所有的卖家。但这不是我们需要的。我们想找北京地区所有的婴儿用品卖家。
小不懂：我知道。我们还需要卖家售卖商品的信息。我们有这样的数据表吗？
于雷：有。seller_product_summary这张表，你先自己探索下看看，十五分钟后告诉我，有什么收获。
 小不懂回到工位，想起前几天学的，探索表信息的方法，先用
desc seller_product_summary; 查看表结构：
哦，卖家id 和 商品分类共同构成了主键，有趣。也就是说，卖家id可能有重复值，商品分类也可能有重复值，但卖家id 和商品分类 结合起来，是唯一的。
订单数和订单价值是，某卖家在某一个品类下的订单数和订单价值。
 再看看数据具体是什么样子：
select * from seller_product_summary limit 10; 果然，卖家id有重复的，一个卖家可能会卖多个品类的商品，比如红框里那位卖家，卖园艺工材。
另外有些商品品类信息是空值。
初步看，订单数和订单价值差异比较大，订单数从1到几百；订单价值从98到2万多。
 看看一共有多少行数据：
select count(seller_id) from seller_product_summary ; 6千多行，还挺多的。
下一步，针对我们关注的卖家id 和品类，多取一点数出来看看：</description>
    </item>
    
    <item>
      <title>6.  整合多张表的信息——join</title>
      <link>https://shuiseeery.github.io/post/6-join/</link>
      <pubDate>Mon, 25 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/6-join/</guid>
      <description>小不懂熟悉了count、sum、max、min、avg、distinct的用法后，想了想，自己已经找到所有北京的卖家，也能找到所有婴儿用品卖家，只差把这两个信息结合起来，离结果胜利在望。
她去找于雷：我该怎么把北京的卖家，和婴儿用品的卖家信息组合起来呢？结合起来，就能找到所有北京婴儿用品的卖家。
于雷反问：你有什么想法呢？
 小不懂：我有一个笨办法，把所有北京的卖家id拿出来，去婴儿用品卖家表里挨个查，能找到的，就是北京婴儿用品卖家。这个方法可以做，只是麻烦一些。
于雷：哈哈哈，你说得对，这是一个吭哧吭哧的体力活，要花很长时间。sql里有个功能，可以帮你完成这个复杂的过程，你只需要告诉数据库，需要在哪两张表中，按什么字段来查找信息。
select * from ( select seller_id,city from seller_info where province=&amp;#39;北京&amp;#39; )beijing_seller join ( select seller_id, product_category_name from seller_product_summary where product_category_name=&amp;#39;婴儿用品&amp;#39; )baby_product_seller on beijing_seller.seller_id = baby_product_seller.seller_id ; 于雷：你看看这段代码。
小不懂：前面一张表是北京卖家id，后面一张是婴儿用品卖家信息。两张表用join一下，后面的on 是在告诉数据库，两张表里seller_id 相等？
于雷：答对了一半。join 和 on 是联合起来使用的，完整的功能是，在两张表卖家id相等的那些行，把两张表粘贴起来，像用胶水拼贴一样。
小不懂：嗯，最终查询出的结果里，既有前一张表的城市信息，也有品类表里的品类信息。一共只有7个卖家符合条件啊。
 于雷：直接看数据库的结果可能有些抽象，我找个简单的表给你演示一下
小不懂：噢，我明白了。找到两张表里相等的卖家id，把它们的信息组合起来，做成一张新的表。
 于雷：嗯。你再看这个呢？
小不懂：哎，品类信息表里王二出现了2次， 王二既卖婴儿用品也卖家具。所以在join后的结果里，王二应该也有2条记录？
于雷：对。这种情况我们称为一对多关系，会得到下面的结果。
小不懂：嗯嗯。这还是和主键有关。卖家品类信息表里，卖家id+品类信息一起构成了主键。重复出现的王二会和城市表的王二逐个匹配。
 于雷：对。你再看这个呢？
小不懂：哎，品类信息表第二个王二的记录也是婴儿用品。这张表没有主键。
于雷：在很偶尔的情况下，会存在一些没有主键的表。你看现在两张表关联后的结果是什么呢？
小不懂：品类信息表的第二个王二依然会和卖家城市表匹配，结果表里会有重复。
于雷：没错。是这样。
 于雷：接下来看最复杂的情况，多对多关系。
小不懂：城市信息表里的2个王二，分别和品类信息表里的2个王二关联，结果有2*2共4条一样的记录。
于雷：嗯，可以直接报答案了，不错不错。
小不懂挠挠头笑了。
 于雷：画表关系图是最基本，也是最好用的办法。遇到非常复杂的数据表关联， 理不清关系时，抽几条数据，自己画一下关系图，一目了然，清清楚楚。我希望你能学会通用的方法，自己掌握解决问题的工具。
小不懂：嗯，谢谢于雷哥。
于雷：最后还有2个稍微复杂一点的用法。
于雷：这是left join， 会把前面一张表的所有信息保留下来。</description>
    </item>
    
    <item>
      <title>7.  分类求每种产品的售卖情况——group by</title>
      <link>https://shuiseeery.github.io/post/7-groupby/</link>
      <pubDate>Sun, 24 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/7-groupby/</guid>
      <description>这天，有个运营丹霞来找小不懂和于雷。丹霞说，她在制定下一个季度各个品类的销售目标，需要根据当前各品类的销售金额，来判断，给每个品类投入多少预算。于雷接下这个需求。他问小不懂有什么想法。
小不懂：我们上次用到的卖家品类信息表里，有各个卖家不同品类的订单量，和订单金额。从这张表里可以加工得到每个品类的销售金额。
于雷：好，你找几个品类试试。
 小不懂想起之前看到美妆、手机这两个品类，再加上婴儿用品，一起看看它们的销售金额。
select sum(order_values) as category_values from seller_product_summary where product_category_name=&amp;#39;婴儿用品&amp;#39;; select sum(order_values) as category_values from seller_product_summary where product_category_name=&amp;#39;美妆&amp;#39;; select sum(order_values) as category_values from seller_product_summary where product_category_name=&amp;#39;手机&amp;#39;; 噢，婴儿用品接近42万，美妆125万，手机32万。这样可以算出来哎。
 她又想，那一共有多少个品类需要计算呢？用 distinct 去重后，再count计数就可以知道。
select count(distinct product_category_name) as category_num from seller_product_summary; 啊。。。一共有72个品类啊。那每个都敲一遍，得花好长时间。有没有简单的办法呢？
 小不懂找于雷帮忙，问：于雷哥，我从表里用where筛选美妆品类，再加总订单金额，这样可以算出美妆品类一共有125万金额。类似地，对每个品类都这么算，可以求出每个品类的金额。不过有个问题，我们有72个品类，每个品类算一遍，实在太慢，效率很低。能怎么改进呢？
于雷：哈哈哈。知道通过学习来提高效率，不错不错。用品类名称分组后，再分别对每个品类求和，就能一次得到你想要的结果。
比如，下面：
select product_category_name, sum(order_values) as order_values from seller_product_summary group by product_category_name; 小不懂：哇。真的可以一次性算出来啊。好棒。
于雷：哈哈哈。科技的进步是懒人推动的。用group by分组后，可以对每个分组结果统计多种信息。比如max、min、等等。你自己试试。
 小不懂：好。我想想啊，group by 实际相当于把数据表，按照品类名称分成好多张小表，每张表里放着这个品类所有的数据。比如婴儿用品里面，是所有婴儿用品卖家的卖家id、订单量、和订单金额。然后对每张品类表求和， 每张表得到一个数字，把求和结果和品类名称一起组合成一张新的表输出出来。是这样理解吗？
于雷：对。sql的核心是，把数据表当作对象，对数据表做不同的操作。你回忆一下，sql的语法和其他程序语言，比如C、Python、R之类不一样。不是从上到下按顺序起作用的。拿最简单的代码来看：
select seller_id, product_category_name from product_category_name limit 10; 它不是先筛选卖家id、品类，而是先读from product_category_name， 选定卖家品类信息表，再做筛选两列的操作，最后限制结果limit 10行。</description>
    </item>
    
    <item>
      <title>8.  高级用法——select 进阶</title>
      <link>https://shuiseeery.github.io/post/8-where/</link>
      <pubDate>Sat, 23 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/8-where/</guid>
      <description>早上小不懂刚去公司，于雷喊她过来，说有好事儿等着她。
于雷：昨天各品类的销售额数据，丹霞妹子很满意。看起来你代码基本功学得还可以，现在有一些代码你来自学一下。
小不懂：啊？好的。我试试。
于雷：很简单。我把代码给你，你研究一会儿，告诉我这些代码是什么意思。其实很简单，你把它们提交到数据库里，看看结果，想一想代码做了什么操作，一会儿就搞透了。
小不懂：唔好的。
 小不懂回去看了看代码，大概知道于雷让她学的内容了。
她打开电脑，把代码逐一敲进去，验证自己的想法：
select count(1) as num, max(order_values) as max_value, avg(order_values) as avg_order_value, max(order_values) - avg(order_values) as value_gap, max(order_values) + min(order_values) as value_1, (max(order_values) + min(order_values) )/2 as value_2 from seller_product_summary; 从卖家品类信息表里，先计算一共有多少条记录，再求销售额的最大值和平均值，然后用最大值减去平均值看差异，再把最大值、最小值相加，并除以2。
这段代码主要在演示对某一数值做加减法、除法怎么做。
果然如此。value_gap是最大值和平均值的差，value_2是最大值和最小值的平均值。
 下面这段是在讲数值乘法。
select count(seller_id) as num, sum(order_values) as sum_values, avg(order_values) as avg_order_value, avg(order_values)*count(seller_id) as sum_values2 from seller_product_summary; 金额平均值乘以个数，等于金额总和。
 小不懂好奇，对一列数据做加减乘除，是不是也是同样的计算方式呢？
她想自己试试看，编了下面的代码，敲进去：
select order_num, (order_num - 10) as num_1, (order_num + 10) as num_2, (order_num * 10) as num_3, (order_num / 10) as num_4 from seller_product_summary limit 5; 哇哦，是的呢。用+、-、*、/ 运算符号，可以直接对一列数据做加减乘除法,很简单也很方便。</description>
    </item>
    
    <item>
      <title>9.  综合练习——做一份日报</title>
      <link>https://shuiseeery.github.io/post/9-dailyreport/</link>
      <pubDate>Fri, 22 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/9-dailyreport/</guid>
      <description>这天是个阳光明媚的日子。小不懂刚去公司，于雷喊她：“来活儿了。”
小不懂跑过去：“于雷哥，咱要做什么呀？”
于雷：为了方便运营同学了解经营情况，我们需要做一份日报。
小不懂：日报？需要每天看的报表？
于雷：对。把我们最关注的、重要的经营结果，按天汇总，做成报表，每天可以看到昨天的数据，可以及时发现问题。你想想，我们最关心哪些数据呢？
小不懂：嗯，我们是网上超市，那肯定最关心，一天卖了多少货，有多少收入。
于雷：对。order_info是我们的订单表， order_items是订单商品明细表，这两张表里有足够多的信息，你去试试看。
 小不懂回去探索这两张新的表。
先看看order_info 订单表结构：
desc order_info; 主键是订单id，其他的信息有客户id、订单状态、购买时间，binggo，这个购买时间是我们关注的日期。余下还有订单确认时间、开始运输时间、运送到客户手里的时间，和订单预计送达时间。这是网购中，订单经过的所有环节。
那么做日报时，把一天里所有的订单取出来就可以了。
那接下来看看数据具体存储了什么内容：
select * from order_info limit 3; 哦，这里时间都是精确到秒的，需要取出日期，等会儿找于雷哥问问。
 订单状态，显示已送达，我来看看有没有其他状态：
select distinct order_status from order_info; 哦，好多种状态：送达、unavailable 不知道是不是商品缺货、shipped 是正在送货？取消、invoiced看不出来是什么，processing还在进行种、订单确认、和创建。
再看看具体每种状态有多少订单：
select order_status, count(order_id) as order_num, count(distinct order_id) as order_num_2 from order_info group by order_status; 由于order_id是主键，没有重复值，所以直接count 和去重后count是一样的。
大多数的订单都是已送达。
 接下来看最关心的购买时间，看看购买时间最大、最小值：
select max(order_purchase_timestamp) as max_time, min(order_purchase_timestamp) as min_time from order_info; 哦，时间跨度从16年9月到18年10月，挺久的。
 最后看看表里有多少行数据：
哦，有9万9千行。
总结一下，订单表记录了订单从创建、确认、运输、送达等环节的时间信息，和购买用户id。订单状态有送达、运输中等多种状态，主要是送达。表里的信息从16年9月到18年10月，共9万9千行记录。
 再看另外一张订单商品明细表，order_items：</description>
    </item>
    
    <item>
      <title>10.  高级用法——分类讨论</title>
      <link>https://shuiseeery.github.io/post/10-casewhen/</link>
      <pubDate>Thu, 21 Jan 2021 08:36:54 -0700</pubDate>
      
      <guid>https://shuiseeery.github.io/post/10-casewhen/</guid>
      <description>小不懂刚刚更新完昨天的日报，于雷找她，说需要对品类结构做个整体的分析。
于雷：运营同学想了解各品类的现状，想对不同品类做差异化运营策略。具体来说，想知道
 哪些品类单价低、订单多，对这些品类，引导交叉销售，如买洗护用品推荐美妆产品 哪些品类单价低、订单少，对这些品类，研究品类特点，寻找提升订单的方法 哪些品类单价高、订单多，对这些品类，加大宣传曝光，吸引更多人来买 哪些品类单价高、订单少，对这些品类，适当发优惠券，促进用户购买  小不懂：为什么关注单价高低、订单多少呢？
于雷：这要从业务的模式说起。网上超市业务的经营目标是：持续不断地把商品卖给用户，让用户买得越多越好。我们最关注的是总销售额。而总销售额，是每笔订单金额之和。总销售额=订单数*单均价。提升销售额的方法，要么提高订单数，要么提高单均价。所以品类运营，也要围绕着这个目标来做。一个品类对网上超市整体的贡献，或者体现在贡献订单数上、或者体现在提高单均价上面。
小不懂：哦，也就是说，大家的主要工作，需要围绕核心目标展开？
于雷：对。这是除后勤、行政等职能外，大多数工作岗位存在的原因。所以工作时，需要常常想，现在做的工作，和公司整体的目标，是不是一致的，按照对目标的影响大小，来判断一项工作的重要性。
小不懂：嗯嗯。学到了。
于雷：说回这个分析，怎么衡量一个品类的单价高低、订单多少呢？
小不懂：嗯，可以拿平均水平做参照？比平均值高，就是更好的。
于雷：这种思路也可以，你试试看。
 小不懂想了想，需要先算出，每个品类的单价（平均价格）、订单数量，再求平均。所以代码要这样写：
select avg(order_num) as avg_order, avg(avg_value) as avg_category_value from ( select product_category_name, sum(order_num) as order_num, sum(order_values)/sum(order_num) as avg_value from seller_product_summary group by product_category_name )category_info; 结果是：平均1391个订单，单价160元。
 那么哪些品类订单多、单价也高呢？在所有品类里做筛选：
select * from ( select product_category_name, sum(order_num) as order_num, sum(order_values)/sum(order_num) as avg_value from seller_product_summary group by product_category_name )category_info where order_num&amp;gt;1391 and avg_value&amp;gt;160; 只有钟表和网红产品啊。
 再看看销量高，单价低的产品。这次把单价后的小数去掉，看着太费劲了：</description>
    </item>
    
  </channel>
</rss>
